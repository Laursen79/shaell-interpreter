fn TestStringOp()
    A:assert("a" + "b" == "ab", "String concatenation through + operator")
    A:assert("2" + 1 == "21", "String concatenation through + operator")
    A:assert(1 + "2" == "12", "String concatenation through + operator")

    A:assert("ab" * 2 == "abab", "String repetition through * operator")
    A:assert("ab" * 0 == "", "String repetition through * operator")
    A:assert(2 * "ab" == "abab", "String repetition through * operator")
    A:assert(0 * "a" == "", "String repetition through * operator")
end

fn TestNumberOp()
    A:assert(1 + 2 == 3, "Number addition through + operator")
    A:assert(1 - 2 == -1, "Number subtraction through - operator")
    A:assert(1 * 2 == 2, "Number multiplication through * operator")
    A:assert(2 / 2 == 1, "Number division through / operator")
    A:assert(1 / 2 == 0.5, "Number division through / operator")
    A:assert(2 % 2 == 0, "Number modulo through % operator")
    A:assert(4 % 3 == 1, "Number modulo through % operator")
    A:assert(2 ** 3 == 8, "Number exponentiation through ^ operator")
end

fn TestCompoundExpr()
    let value = 5
    value += 10
    A:assert(value == 15, "Number addition through += operator")
    value -= 10
    A:assert(value == 5, "Number subtraction through -= operator")
    value *= 2
    A:assert(value == 10, "Number multiplication through *= operator")
    value /= 2
    A:assert(value == 5, "Number division through /= operator")
    value %= 2
    A:assert(value == 1, "Number modulo through %= operator")
    value **= 2
    A:assert(value == 1, "Number exponentiation through **= operator")
    let string = "a"
    string += "b"
    A:assert(string == "ab", "String concatenation through += operator")
end    

A:describe("Test strings", TestStringOp)
A:describe("Test numbers", TestNumberOp)
A:describe("Test compound expressions", TestCompoundExpr)

A:describe("Test boolean logic", fn()
    A:assert(true == true, "true == true")
    A:assert(false == false, "false == false")
    A:assert((true == false) == false, "true != false through ==")
    A:assert((false == true) == false, "false != true through ==")
    A:assert(true != false, "true != false through !=")
    A:assert(false != true, "false != true through !=")
    A:assert((true != true) == false, "true == true through !=")
    A:assert((false != false) == false, "false == false through !=")
end)

A:describe("Test number comparison", fn()
    A:assert(1 == 1, "1 == 1")
    A:assert(2 == 2, "2 == 2")
    A:assert(1 != 2, "1 != 2")
    A:assert(-1 != 1, "1 != -1")
    A:assert(1 < 2, "1 < 2")
    A:assert((2 < 1) == false, "2 < 1 == false")
    A:assert((2 < 2) == false, "2 < 2 == false")
    A:assert(1 <= 1, "1 <= 1")
    A:assert(1 <= 2, "1 <= 2")
    A:assert((3 <= 2) == false, "3 <= 2 == false")
    A:assert(2 > 1, "2 > 1")
    A:assert((2 > 2) == false, "2 > 2 == false")
    A:assert((2 > 3) == false, "2 > 3 == false")
    A:assert(1 >= 1, "1 >= 1")
    A:assert(2 >= 1, "2 >= 1")
    A:assert((2 >= 3) == false, "2 >= 3 == false")
    
end)